Task 1: Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).

moduel top_moudule ( out );
	output  out;
	assign out = 1'b1;
endmodule


Task 2: Create a module with one input and one output that behaves like a wire.

module top_module (	in,	out	);
	input in;
	output out;
	wire out;
	assign out = in;
endmodule


Task 3: Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections:

a -> w
b -> x
b -> y
c -> z

module top_module ( a, b, c, w, x, y, z );
	input a;
	input b;
	input c;
	output w;
	output x;
	output y;
	output z;
	wire w;
	wire x;
	wire y;
	wire z;
	assign w = a;
	assign x = b;
	assign y = b;
	assign z = c;
endmodule


Task 4: Create a module that implements a NOT gate (inverter). (1 -> 0, 0 -> 1)

module top_module ( a, y );
	input a;
	output y;
	wire y;
	assign y = !a;		//or y = ~a;
endmodule


Task 5: Create a module that implements an AND gate. (1:1 -> 1, others -> 0)

module top_module ( a, b, y );
	input a;
	input b:
	output y;
	wire y;
	assign y = a&&b; // or y = a&b;
endmodule


Task 6: Create a module that implements a NOR gate. A NOR gate is an OR gate with its output inverted

module top_module ( a, b, y );
	input a;
	input b:
	output y;
	wire y;
	assign y = !a||b; 
endmodule


Task 7: Create a module that implements an XNOR gate

module top_module ( a, b, y );
	input a;
	input b:
	output y;
	wire y;
	assign y = (a && b) || ((!a) && (!b));
endmodule


Task 8: Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. 
        Note that the wire that feeds the NOT gate is really wire out, so you do not necessarily need to declare a third wire here

module top_module ( a, b, c, d, y, y_n );
	input a;
	input b:
	input c;
	input d;
	output y;
	output y_n;
	wire ab, cd;
	wire y1, y, y_n;
	assign ab = a&&b;
	assign cd = c&&d;
	assign y1 = ab||cd;
	assign y = y1;
	assign y_n = !y1;
	/*
	assign y = ab||cd;
	assign y_n = !y;
	*/	
endmodule


Task 9: 7458 chip design

module top_module ( 
	p1a,
	p2a,
	p2b,
	p2c,
	p2d,
	p1c,
	p1b,
	p1f,
	p1e,
	p1d,
	p1y,
	p2y
	);
	input p1a;
	input p2a;
	input p2b;
	input p2c;
	input p2d;
	input p1c;
	input p1b;
	input p1f;
	input p1e;
	input p1d;
	output p1y;
	output p2y;
	wire p2ab, p2cd, p1abc, p1def
	wire p1y, p2y;
	
	assign p2ab = p2a&&p2b;
	assign p2cd = p2c&&p2d;
	assign p1abc = p1a&&p1b&&p1c;
	assign p1def = p1d&&p1e&&p1f;
	assign p2y = p2ab||p2cd;
	assign p1y = p1abc||p1def;
endmodule






